#!/usr/bin/env python3
"""Generate the dockerfiles from a jinja template."""
import ruamel.yaml
import json
import logging
from jinja2 import Environment, FileSystemLoader


log = logging.getLogger(__name__)
json_parser = json
yaml = ruamel.yaml.YAML()
with open('templates.yml', 'r') as file:
    settings = yaml.load(file)


def templates():
    """Return all of the templates and settings."""
    return settings


def images():
    """List of images and targets."""
    image_list = {}
    for repository in templates():
        for dockerfile in templates()[repository]:
            image_list[dockerfile["name"]] = {
                "repository": repository,
                "targets": dockerfile["targets"]
            }
    return image_list


def workflow_names():
    """List workflow docker images that are not eol."""
    image_list = []
    for repository in templates():
        for dockerfile in templates()[repository]:
            if "eol" not in dockerfile.keys():
                image_list.append(dockerfile["name"])
    return image_list


def generate_dockerfiles(log):
    """Generate the dockerfiles for this repo."""
    file_loader = FileSystemLoader('template')
    env = Environment(loader=file_loader)

    for repository in templates():
        # The jinja template file name
        template_file = repository + ".dockerfile.jinja"
        # The jinja template
        template = env.get_template(template_file)
        # The set of dockerfiles generated by this template
        dockerfiles = templates()[repository]
        for dockerfile in dockerfiles:
            output = template.render(dockerfile)
            out_file = repository + "/" + dockerfile['name'] + ".Dockerfile"
            log.info("Generating {filename}".format(filename=out_file))
            dockerfile_out = open(out_file, "w")
            dockerfile_out.write(output)
            dockerfile_out.close()
        log.info("Generating readme for {}".format(repository))
        readme_template = env.get_template('readme.md.jinja')
        readme_output = readme_template.render(
            {"repo_name": repository,
             "dockerfiles": dockerfiles})
        readme_file = repository + "/README.md"
        readme_out = open(readme_file, "w")
        readme_out.write(readme_output)
        readme_out.close()


def generate_workflow(log):
    """Generate workflow with non-eol images."""
    log.info("Generating workflow file.")
    workflow_file = ".github/workflows/docker.yml"
    docker_workflow = None
    with open(workflow_file, 'r') as file:
        docker_workflow = yaml.load(file)
        (docker_workflow["jobs"]["docker"]["strategy"]
         ["matrix"]["docker_image"]) = workflow_names()

    with open(workflow_file, "w") as file:
        yaml.indent(mapping=2, sequence=4, offset=2)
        yaml.dump(docker_workflow, file)


def generate_tasks(log):
    """Generate tasks with non-eol images."""
    log.info("Generating tasks.")
    tasks_file = ".vscode/tasks.json"
    with open(tasks_file, 'r') as file:
        tasks = json_parser.load(file)
        for input in tasks["inputs"]:
            if input["id"] == "build_name":
                input["options"] = workflow_names() + ['all']
    with open(tasks_file, "w") as file:
        json_parser.dump(tasks, file, indent=2)


if __name__ == "__main__":
    # Set up logger.
    log.setLevel(logging.INFO)
    formatter = logging.Formatter('%(message)s')
    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(logging.INFO)
    stream_handler.setFormatter(formatter)
    log.addHandler(stream_handler)

    generate_dockerfiles(log)
    generate_workflow(log)
    generate_tasks(log)
    log.info("Finished generating dockerfiles.")
