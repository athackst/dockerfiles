name: Test

on:
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.x
          cache: "pip"
      - name: Install pip packages
        run: |
          python -m pip install --upgrade pip
      - name: flake8
        run: |
          pip install flake8
          flake8 .
      - name: pydocstyle
        run: |
          pip install pydocstyle
          pydocstyle .

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.x
          cache: pip
      - name: Verify dockerfiles
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          ./generate.py
          git diff --exit-code

  action-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.x
          cache: pip

      - name: Run unit tests
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python -m unittest discover -s .github/actions -p 'test_*.py'

  targets:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.stages }}
      has_changes: ${{ steps.filter.outputs.affected == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Find changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docker:
              - '*.Dockerfile'
            action:
              - '.github/actions/docker-*/*'
            affected:
              - '*.Dockerfile'
              - '.github/actions/docker-*/*'

      - name: Generate list of targets (filtered)
        id: matrix
        uses: ./.github/actions/docker-targets
        with:
          changed: ${{ steps.filter.outputs.docker_files }}
          all: ${{ steps.filter.outputs.action }}

  docker-build:
    needs: targets
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.targets.outputs.matrix) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.x
          cache: pip

      - run: pip install -r requirements.txt

      - name: Extract Label and Tag
        id: extract
        run: |
          # Extract the full filename (e.g., label/tag.Dockerfile)
          filename="${{ matrix.dockerfile }}"

          # Extract label (e.g., 'label')
          label=$(dirname "$filename")

          # Extract tag (e.g., 'tag')
          tag=$(basename "$filename" | cut -d. -f1)

          echo "Label: $label, Tag: $tag"

          # Set outputs for subsequent steps
          echo "label=$label" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Check if target exists
        id: target
        run: |
          python .github/scripts/check_target.py \
            --label "${{ steps.extract.outputs.label }}" \
            --tag "${{ steps.extract.outputs.tag }}" \
            --target "${{ matrix.target }}"

      - name: Build docker
        id: docker
        if: ${{ matrix.dockerfile != 'none' && steps.target.outputs.exists == 'true' }}
        uses: ./.github/actions/docker-build-push
        with:
          label: ${{ steps.extract.outputs.label }}
          tag: ${{ steps.extract.outputs.tag }}
          target: ${{ matrix.target }}
          platforms: "linux/amd64"

  complete:
    needs:
      - lint
      - generate
      - docker-build
    if: ${{ always() && !cancelled() && needs.docker-build.result != 'cancelled' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check
        run: |
          if [ "${{ needs.lint.result }}" != 'success' ]; then
            echo "Lint failed"
            exit 1
          fi
          if [ "${{ needs.generate.result }}" != 'success' ]; then
            echo "Generate failed"
            exit 1
          fi
          if [ "${{ needs.docker-build.result }}" != 'skipped' ] && \
             [ "${{ needs.docker-build.result }}" != 'success' ]; then
            echo "Docker failed"
            exit 1
          fi
          echo "Completed successfully"
